/* 
      _            _         _                                 
     | |          | |       | |                                
   __| | __ _  ___| |_ _   _| | ___  ___  ___ ___  _ __  _   _ 
  / _` |/ _` |/ __| __| | | | |/ _ \/ __|/ __/ _ \| '_ \| | | |
 | (_| | (_| | (__| |_| |_| | | (_) \__ \ (_| (_) | |_) | |_| |
  \__,_|\__,_|\___|\__|\__, |_|\___/|___/\___\___/| .__/ \__, |
                        __/ |                     | |     __/ |
                       |___/                      |_|    |___/  
// Browser Exploitation Toolkit


Developer: Reece Harris
    Github: https://github.com/NotReeceHarris
    Twitter: https://www.linkedin.com/in/reece-harris-3215b91bb/

Private Mode detection:
    Developer:  Avatar Joe Rutkowski
        Github: https://github.com/Joe12387
*/
class dactyloscopy {

    'use strict';
    constructor() {

        this.detectIncognito = function() {
            return new Promise(function(resolve, reject) {
                var browserName = "Unknown";

                function __callback(isPrivate) {
                    resolve({
                        isPrivate: isPrivate,
                        browserName: browserName
                    });
                }

                function identifyChromium() {
                    var ua = navigator.userAgent;
                    if (ua.match(/Chrome/)) {
                        if (navigator.brave !== undefined) {
                            return "Brave"
                        } else if (ua.match(/Edg/)) {
                            return "Edge";
                        } else if (ua.match(/OPR/)) {
                            return "Opera";
                        }
                        return "Chrome";
                    } else {
                        return "Chromium";
                    }
                }

                function assertEvalToString(value) {
                    return value === eval.toString().length;
                }

                function isSafari() {
                    var v = navigator.vendor;
                    return v !== undefined && v.indexOf("Apple") === 0 && assertEvalToString(37);
                }

                function isChrome() {
                    var v = navigator.vendor;
                    return v !== undefined && v.indexOf("Google") === 0 && assertEvalToString(33);
                }

                function isFirefox() {
                    return document.documentElement !== undefined && document.documentElement.style.MozAppearance !== undefined && assertEvalToString(37);
                }

                function isMSIE() {
                    return navigator.msSaveBlob !== undefined && assertEvalToString(39);
                }

                function macOS_safari14() {
                    try {
                        window.safari.pushNotification.requestPermission("https://example.com", "private", {}, (function() {}));
                    } catch (e) {
                        return __callback(!new RegExp("gesture").test(e));
                    }
                    return __callback(false);
                }

                function iOS_safari14() {
                    var tripped = false;
                    var iframe = document.createElement("iframe");
                    iframe.style.display = "none";
                    document.body.appendChild(iframe);

                    iframe.contentWindow.applicationCache.addEventListener("error", function() {
                        tripped = true;
                        return __callback(true);
                    });

                    setTimeout(function() {
                        if (!tripped) {
                            __callback(false);
                        }
                    }, 100);
                }

                function oldSafariTest() {
                    var openDB = window.openDatabase;
                    var storage = window.localStorage;
                    try {
                        openDB(null, null, null, null);
                    } catch (e) {
                        return __callback(true);
                    }
                    try {
                        storage.setItem("test", "1");
                        storage.removeItem("test");
                    } catch (e) {
                        return __callback(true);
                    }
                    return __callback(false);
                }

                function safariPrivateTest() {
                    var w = window;
                    if (navigator.maxTouchPoints !== undefined) {
                        if (w.safari !== undefined && w.DeviceMotionEvent === undefined) {
                            browserName = "Safari for macOS";
                            macOS_safari14();
                        } else if (w.DeviceMotionEvent !== undefined) {
                            browserName = "Safari for iOS";
                            iOS_safari14();
                        } else {
                            reject(new Error("detectIncognito Could not identify this version of Safari"));
                        }
                    } else {
                        browserName = "Safari";
                        oldSafariTest();
                    }
                }

                function getQuotaLimit() {
                    var w = window;
                    if (w.performance !== undefined && w.performance.memory !== undefined && w.performance.memory.jsHeapSizeLimit !== undefined) {
                        return performance.memory.jsHeapSizeLimit;
                    }
                    return 1073741824;
                }

                function storageQuotaChromePrivateTest() {
                    navigator.webkitTemporaryStorage.queryUsageAndQuota(
                        function(usage, quota) {
                            __callback(quota < getQuotaLimit());
                        },
                        function(e) {
                            reject(new Error("detectIncognito somehow failed to query storage quota: " + e.message));
                        }
                    );
                }

                function oldChromePrivateTest() {
                    var fs = window.webkitRequestFileSystem;
                    var success = function() {
                        __callback(false);
                    };
                    var error = function() {
                        __callback(true);
                    };
                    fs(0, 1, success, error);
                }

                function chromePrivateTest() {
                    if (Promise !== undefined && Promise.allSettled !== undefined) {
                        storageQuotaChromePrivateTest();
                    } else {
                        oldChromePrivateTest();
                    }
                }

                function firefoxPrivateTest() {
                    __callback(navigator.serviceWorker === undefined);
                }

                function msiePrivateTest() {
                    __callback(window.indexedDB === undefined);
                }

                function main() {
                    if (isSafari()) {
                        safariPrivateTest();
                    } else if (isChrome()) {
                        browserName = identifyChromium();
                        chromePrivateTest();
                    } else if (isFirefox()) {
                        browserName = "Firefox";
                        firefoxPrivateTest();
                    } else if (isMSIE()) {
                        browserName = "Internet Explorer";
                        msiePrivateTest();
                    } else {
                        reject(new Error("detectIncognito cannot determine the browser"));
                    }
                }

                main();
            });
        };

        if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
            this.theme = 'dark'
        } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {
            this.theme = 'light'
        } else {
            this.theme = 'other'
        }

        if ('WebkitAppearance' in document.documentElement.style) { if (escape(navigator.javaEnabled.toString()) === 'function%20javaEnabled%28%29%20%7B%20%5Bnative%20code%5D%20%7D') { this.engine = 'V8'; } else { this.engine = 'JSC'; } } else { this.engine = "Not a WebKit browser"; }
        var canvas = document.createElement("canvas")
        var webgl = canvas.getContext("webgl") || canvas.getContext("experimental-webgl")
        var gpu = webgl.getParameter(webgl.getExtension("webgl_debug_renderer_info").UNMASKED_RENDERER_WEBGL)
        this.webdriver = navigator.webdriver
        this.buildID = navigator.buildID
        this.platform = navigator.platform
        this.appName = navigator.appName
        this.cookieEnabled = navigator.cookieEnabled
        this.hardwareConcurrency = navigator.hardwareConcurrency
        this.language = navigator.language
        this.maxTouchPoints = navigator.maxTouchPoints
        this.deviceMemory = navigator.deviceMemory
        this.gpu = gpu
        this.screen = screen.width.toString() + 'x' + screen.height.toString()
        this.browserSize = window.outerWidth.toString() + 'x' + window.outerHeight.toString()
        if (navigator.userAgent.indexOf("Chrome") != -1) { this.browser = "Google Chrome"; } else if (navigator.userAgent.indexOf("Firefox") != -1) { this.browser = "Mozilla Firefox"; } else if (navigator.userAgent.indexOf("MSIE") != -1) { this.browser = "Internet Exploder"; } else if (navigator.userAgent.indexOf("Edge") != -1) { this.browser = "Internet Exploder"; } else if (navigator.userAgent.indexOf("Safari") != -1) { this.browser = "Safari"; } else if (navigator.userAgent.indexOf("Opera") != -1) { this.browser = "Opera"; } else if (navigator.userAgent.indexOf("YaBrowser") != -1) { this.browser = "YaBrowser"; } else { this.browser = "Others"; }
        this.private = this.detectIncognito().then(function(result) {
            if (result.isPrivate) {
                return true;
            } else {
                return false;
            }
        })
    }

    'use strict';
    _hash(string) {
        var hash = 0;
        if (string.length == 0) return hash;
        for (var i = 0; i < string.length; i++) {
            var char = string.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        if (hash < 0) hash = hash * -1
        return hash;
    }

    'use strict';
    canvasFingerprint() {

        var canvas = document.createElement("canvas");
        canvas.style.cssText = "display: none;"
        document.body.appendChild(canvas);
        var ctx = canvas.getContext("2d");

        ctx.fillStyle = "rgb(255,0,255)";
        ctx.beginPath();
        ctx.rect(20, 20, 150, 100);
        ctx.fill();
        ctx.stroke();
        ctx.closePath();
        ctx.beginPath();
        ctx.fillStyle = "rgb(0,255,255)";
        ctx.arc(50, 50, 50, 0, Math.PI * 2, true);
        ctx.fill();
        ctx.stroke();
        ctx.closePath();
        var txt = 'abz190#$%^@£éú';
        ctx.textBaseline = "top";
        ctx.font = '17px "Arial 17"';
        ctx.textBaseline = "alphabetic";
        ctx.fillStyle = "rgb(255,5,5)";
        ctx.rotate(.03);
        ctx.fillText(txt, 4, 17);
        ctx.fillStyle = "rgb(155,255,5)";
        ctx.shadowBlur = 8;
        ctx.shadowColor = "red";
        ctx.fillRect(20, 12, 100, 5);
        var hash = this._hash(canvas.toDataURL())
        canvas.remove()
        return hash
    }

    'use strict';
    browserFingerprint() {
        var data = [
            this.webdriver,
            this.buildID,
            this.platform,
            this.appName,
            this.cookieEnabled,
            this.hardwareConcurrency,
            this.language,
            this.maxTouchPoints,
            this.deviceMemory,
            this.gpu,
            this.canvasFingerprint(),
            this.theme
        ]
        return this._hash(data.toString())
    }

}